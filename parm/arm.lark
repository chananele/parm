CONDITION_LO: "eq" | "ne" | "gt" | "lt" | "ge" | "le"
CONDITION_HI: "EQ" | "NE" | "GT" | "LT" | "GE" | "LE"

REG: "r"i "0".."9" | "r10"i | "r11"i | "r12"i | "sp"i | "lr"i | "pc"i

SHIFT_OP_LO: "lsl" | "lsr" | "asr" | "rrx" | "ror"
SHIFT_OP_HI: "LSL" | "LSR" | "ASR" | "RRX" | "ROR"
SHIFT_OP: SHIFT_OP_LO | SHIFT_OP_HI

SHIFT_VAL: "1".."9"
         | ("1" | "2") "1".."9"
         | "30" | "31"

SHIFT: SHIFT_OP "#" SHIFT_VAL

BASE_OPCODE_MEM_SINGLE_LO: "ldr" | "ldrb" | "ldrh" | "str" | "strb" | "strh"
BASE_OPCODE_MEM_SINGLE_HI: "LDR" | "LDRB" | "LDRH" | "STR" | "STRB" | "STRH"

BASE_OPCODE_MEM_MULTI_LO: "stm" | "ldm"
BASE_OPCODE_MEM_MULTI_HI: "STM" | "LDM"

MEM_MULTI_SFX_LO: "ia" | "ea"
MEM_MULTI_SFX_HI: "IA" | "EA"

PSEUDO_OPCODE_MEM_MULTI_LO: "push" | "pop"
PSEUDO_OPCODE_MEM_MULTI_HI: "PUSH" | "POP"

OPCODE_MEM_MULTI: BASE_OPCODE_MEM_MULTI_LO [MEM_MULTI_SFX_LO] [CONDITION_LO]
                | BASE_OPCODE_MEM_MULTI_HI [MEM_MULTI_SFX_HI] [CONDITION_HI]
                | PSEUDO_OPCODE_MEM_MULTI_LO [CONDITION_LO]
                | PSEUDO_OPCODE_MEM_MULTI_HI [CONDITION_HI]

OPCODE_MEM_SINGLE: BASE_OPCODE_MEM_SINGLE_LO [CONDITION_LO]
                 | BASE_OPCODE_MEM_SINGLE_HI [CONDITION_HI]

reg_range: REG "-" REG
reg_list: (REG | reg_range) ("," (REG | reg_range))*

instruction: OPCODE_MEM_SINGLE REG "," "[" REG ["," REG] ["," SHIFT] "]"
           | OPCODE_MEM_MULTI  REG "," "{" reg_list "}"

ADDRESS: INT | "0x" HEXDIGIT+

line: [ADDRESS ":"] instruction

start: line

%import common.WS
%import common.INT
%import common.HEXDIGIT
%ignore WS
