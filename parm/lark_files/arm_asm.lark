CONDITION_LO: "eq" | "ne" | "cs" | "hs" | "cc" | "lo" | "mi" | "pl" | "vs" | "vc" | "hi" | "ls" | "ge" | "lt" | "gt" | "le" | "al"
CONDITION_HI: "EQ" | "NE" | "CS" | "HS" | "CC" | "LO" | "MI" | "PL" | "VS" | "VC" | "HI" | "LS" | "GE" | "LT" | "GT" | "LE" | "AL"

REG: "r"i "0".."8" | R9 | "r10"i | R11 | R12 | R13 | R14 | R15

// register synonyms
// TODO: Consider a1-a4 for r0-r4 and v1-v8 for r4-r11)
R9: "r9"i | "sb"i
R11: "r11"i | "fp"i
R12: "r12"i | "ip"i
R13: "r13"i | "sp"i
R14: "r14"i | "lr"i
R15: "r15"i | "pc"i

S_LO: "s"
S_HI: "S"

immediate: "#" NUM

BRANCH_REL_LO: "b" | "bl"
BRANCH_REL_HI: "B" | "BL"
BRANCH_REL: BRANCH_REL_LO | BRANCH_REL_HI
OPCODE_BRANCH_REL_LO: BRANCH_REL_LO [CONDITION_LO]
OPCODE_BRANCH_REL_HI: BRANCH_REL_HI [CONDITION_HI]
OPCODE_BRANCH_REL: OPCODE_BRANCH_REL_LO | OPCODE_BRANCH_REL_HI

BRANCH_IND_LO: "bx" | "blx"
BRANCH_IND_HI: "BX" | "BLX"
BRANCH_IND: BRANCH_IND_LO | BRANCH_IND_HI
OPCODE_BRANCH_IND_LO: BRANCH_IND_LO [CONDITION_LO]
OPCODE_BRANCH_IND_HI: BRANCH_IND_HI [CONDITION_HI]
OPCODE_BRANCH_IND: OPCODE_BRANCH_IND_LO | OPCODE_BRANCH_IND_HI

SHIFT_OP_LO: "lsl" | "lsr" | "asr" | "ror"
SHIFT_OP_HI: "LSL" | "LSR" | "ASR" | "ROR"
SHIFT_OP: SHIFT_OP_LO | SHIFT_OP_HI

SHIFT_UNARY_OP_LO: "rrx"
SHIFT_UNARY_OP_HI: "RRX"
SHIFT_UNARY_OP: SHIFT_UNARY_OP_LO | SHIFT_UNARY_OP_HI

SHIFT_VAL: REG
         | "#" ("1".."9" | ("1" | "2") "1".."9" | "30" | "31") // immediate value between 1 - 31

SHIFT: SHIFT_OP [_WS] SHIFT_VAL
     | SHIFT_UNARY_OP

BASE_OPCODE_MEM_SINGLE_LO: "ldr" | "ldrb" | "ldrh" | "str" | "strb" | "strh"
BASE_OPCODE_MEM_SINGLE_HI: "LDR" | "LDRB" | "LDRH" | "STR" | "STRB" | "STRH"

BASE_OPCODE_MEM_MULTI_LO: "stm" | "ldm"
BASE_OPCODE_MEM_MULTI_HI: "STM" | "LDM"

MEM_MULTI_SFX_LO: "ia" | "ea"
MEM_MULTI_SFX_HI: "IA" | "EA"

STACK_OPCODE_MEM_MULTI_LO: "push" | "pop"
STACK_OPCODE_MEM_MULTI_HI: "PUSH" | "POP"

OPCODE_MEM_MULTI: BASE_OPCODE_MEM_MULTI_LO [MEM_MULTI_SFX_LO] [CONDITION_LO]
                | BASE_OPCODE_MEM_MULTI_HI [MEM_MULTI_SFX_HI] [CONDITION_HI]

OPCODE_STACK_MEM_MULTI: STACK_OPCODE_MEM_MULTI_LO [CONDITION_LO]
                      | STACK_OPCODE_MEM_MULTI_HI [CONDITION_HI]

OPCODE_MEM_SINGLE: BASE_OPCODE_MEM_SINGLE_LO [CONDITION_LO]
                 | BASE_OPCODE_MEM_SINGLE_HI [CONDITION_HI]

MOV_LO: "mov"
MOV_HI: "MOV"
MOV: MOV_LO | MOV_HI
OPCODE_MOV: MOV_LO [S_LO] [CONDITION_LO]
          | MOV_HI [S_HI] [CONDITION_HI]

ARITHMETIC_LO: "add" | "sub" | "rsb" | "adc" | "sbc" | "rsc"
ARITHMETIC_HI: "ADD" | "SUB" | "RSB" | "ADC" | "SBC" | "RSC"
OPCODE_ARITHMETIC: ARITHMETIC_LO [S_LO] [CONDITION_LO]
                 | ARITHMETIC_HI [S_HI] [CONDITION_HI]

BITWISE_LO: "and" | "orr" | "eor" | "bic"
BITWISE_HI: "AND" | "ORR" | "EOR" | "BIC"
OPCODE_BITWISE: BITWISE_LO [S_LO] [CONDITION_LO]
              | BITWISE_HI [S_HI] [CONDITION_HI]

COMPARE_LO: "cmp" | "cmn"
COMPARE_HI: "CMP" | "CMN"
OPCODE_COMPARE: COMPARE_LO [CONDITION_LO]
              | COMPARE_HI [CONDITION_HI]

OPCODE_MULTIPLY: "mul" [S_LO] [CONDITION_LO]
               | "MUL" [S_LO] [CONDITION_LO]

OPCODE_SHIFT: SHIFT_OP_LO [S_LO] [CONDITION_LO]
            | SHIFT_OP_HI [S_HI] [CONDITION_HI]
OPCODE_SHIFT_UNARY: SHIFT_UNARY_OP_LO [S_LO] [CONDITION_LO]
                  | SHIFT_UNARY_OP_HI [S_HI] [CONDITION_LO]

reg: REG
reg_range: reg [_WS] "-" [_WS] reg
reg_list: (reg | reg_range) ([_WS] "," [_WS] (reg | reg_range))*

flexible_operand: (shifted_reg | immediate)

two_reg_operands: reg [_WS] "," [_WS] reg

reg_only_operands: two_reg_operands [[_WS] "," [_WS] reg ]

mov_operands: reg [_WS] "," [_WS] flexible_operand

shifted_reg: reg [_WS] ["," [_WS] SHIFT]

arithmetic_operands: reg [_WS] "," [[_WS] reg [_WS] ","] [_WS] flexible_operand

bitwise_operands: reg [_WS] "," [[_WS] reg [_WS] ","] [_WS] flexible_operand

compare_operands: reg [_WS] "," [_WS] flexible_operand

multiply_operands: reg_only_operands

shift_operands: reg [_WS] "," [_WS] reg [_WS] "," [_WS] SHIFT_VAL

shift_unary_operands: two_reg_operands

mem_single_operand: reg [_WS] "," [_WS] "[" [_WS] reg [_WS] ["," [_WS] immediate [_WS]] "]" -> mem_expr_immediate
                  | reg [_WS] "," [_WS] "[" [_WS] reg [_WS] "," [_WS] immediate [_WS] "]" [_WS] "!" -> mem_expr_immediate_pre
                  | reg [_WS] "," [_WS] "[" [_WS] reg [_WS] "]" [_WS] "," [_WS] immediate -> mem_expr_immediate_post
                  | reg [_WS] "," [_WS] "[" [_WS] reg [_WS] "," [_WS] shifted_reg [_WS] "]" -> mem_expr_reg
                  | reg [_WS] "," [_WS] "[" [_WS] reg [_WS] "," [_WS] shifted_reg [_WS] "]" [_WS] "!" -> mem_expr_reg_pre
                  | reg [_WS] "," [_WS] "[" [_WS] reg [_WS] "]" [_WS] "," [_WS] shifted_reg -> mem_expr_reg_post

mem_multi_operand: reg [_WS] "," [_WS] "{" [_WS] reg_list [_WS] "}"
stack_mem_multi_operand: "{" [_WS] reg_list [_WS] "}"

branch_ind_operands: reg
branch_rel_operands: ["#"] address

instruction: OPCODE_MEM_SINGLE _WS mem_single_operand [_WS]
           | OPCODE_MEM_MULTI _WS mem_multi_operand [_WS]
           | OPCODE_STACK_MEM_MULTI _WS stack_mem_multi_operand [_WS]
           | OPCODE_BRANCH_REL _WS branch_rel_operands [_WS]
           | OPCODE_BRANCH_IND _WS branch_ind_operands [_WS]
           | OPCODE_MOV _WS mov_operands [_WS]
           | OPCODE_ARITHMETIC _WS arithmetic_operands [_WS]
           | OPCODE_BITWISE _WS bitwise_operands [_WS]
           | OPCODE_COMPARE _WS compare_operands [_WS]
           | OPCODE_MULTIPLY _WS multiply_operands [_WS]
           | OPCODE_SHIFT _WS shift_operands [_WS]
           | OPCODE_SHIFT_UNARY _WS shift_unary_operands [_WS]

DEC_NUM: "0" | "1".."9" DIGIT*
HEX_NUM: "0x" HEXDIGIT+
UNSIGNED_NUM: DEC_NUM | HEX_NUM
NUM: ["-"] UNSIGNED_NUM

address: UNSIGNED_NUM

label: address [_WS] ":" [_WS]

line: [_WS] [label] instruction [_WS]

block: [_AWS] line (_NL [_AWS] line)* [_NL [_AWS] label] [_AWS]

%import common.INT
%import common.HEXDIGIT
%import common.DIGIT
%import common.WS_INLINE -> _WS
%import common.WS -> _AWS
%import common.NEWLINE -> _NL

%declare _POST_OPCODE
