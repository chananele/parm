CONDITION_LO: "eq" | "ne" | "cs" | "hs" | "cc" | "lo" | "mi" | "pl" | "vs" | "vc" | "hi" | "ls" | "ge" | "lt" | "gt" | "le" | "al"
CONDITION_HI: "EQ" | "NE" | "CS" | "HS" | "CC" | "LO" | "MI" | "PL" | "VS" | "VC" | "HI" | "LS" | "GE" | "LT" | "GT" | "LE" | "AL"

REG: "r"i "0".."9" | "r10"i | "r11"i | "r12"i | "sp"i | "lr"i | "pc"i

S_LO: "s"
S_HI: "S"

immediate: "#" NUM

BRANCH_REL_LO: "b" | "bl"
BRANCH_REL_HI: "B" | "BL"
OPCODE_BRANCH_REL_LO: BRANCH_REL_LO [CONDITION_LO]
OPCODE_BRANCH_REL_HI: BRANCH_REL_HI [CONDITION_HI]
OPCODE_BRANCH_REL: OPCODE_BRANCH_REL_LO | OPCODE_BRANCH_REL_HI

BRANCH_IND_LO: "bx" | "blx"
BRANCH_IND_HI: "BX" | "BLX"
OPCODE_BRANCH_IND_LO: BRANCH_IND_LO [CONDITION_LO]
OPCODE_BRANCH_IND_HI: BRANCH_IND_HI [CONDITION_HI]
OPCODE_BRANCH_IND: OPCODE_BRANCH_IND_LO | BRANCH_IND_HI CONDITION_HI

SHIFT_OP_LO: "lsl" | "lsr" | "asr" | "rrx" | "ror"
SHIFT_OP_HI: "LSL" | "LSR" | "ASR" | "RRX" | "ROR"
SHIFT_OP: SHIFT_OP_LO | SHIFT_OP_HI

SHIFT_VAL: "1".."9"
         | ("1" | "2") "1".."9"
         | "30" | "31"

SHIFT: SHIFT_OP "#" SHIFT_VAL

BASE_OPCODE_MEM_SINGLE_LO: "ldr" | "ldrb" | "ldrh" | "str" | "strb" | "strh"
BASE_OPCODE_MEM_SINGLE_HI: "LDR" | "LDRB" | "LDRH" | "STR" | "STRB" | "STRH"

BASE_OPCODE_MEM_MULTI_LO: "stm" | "ldm"
BASE_OPCODE_MEM_MULTI_HI: "STM" | "LDM"

MEM_MULTI_SFX_LO: "ia" | "ea"
MEM_MULTI_SFX_HI: "IA" | "EA"

PSEUDO_OPCODE_MEM_MULTI_LO: "push" | "pop"
PSEUDO_OPCODE_MEM_MULTI_HI: "PUSH" | "POP"

OPCODE_MEM_MULTI: BASE_OPCODE_MEM_MULTI_LO [MEM_MULTI_SFX_LO] [CONDITION_LO]
                | BASE_OPCODE_MEM_MULTI_HI [MEM_MULTI_SFX_HI] [CONDITION_HI]
                | PSEUDO_OPCODE_MEM_MULTI_LO [CONDITION_LO]
                | PSEUDO_OPCODE_MEM_MULTI_HI [CONDITION_HI]

OPCODE_MEM_SINGLE: BASE_OPCODE_MEM_SINGLE_LO [CONDITION_LO]
                 | BASE_OPCODE_MEM_SINGLE_HI [CONDITION_HI]

BASE_OPCODE_MOV_LO: "mov"
BASE_OPCODE_MOV_HI: "MOV"
OPCODE_MOV: BASE_OPCODE_MOV_LO [S_LO] [CONDITION_LO]
          | BASE_OPCODE_MOV_HI [S_HI] [CONDITION_HI]

BASE_OPCODE_ARITHMETIC_LO: "add" | "sub" | "rsb" | "adc" | "sbc" | "rsc"
BASE_OPCODE_ARITHMETIC_HI: "ADD" | "SUB" | "RSB" | "ADC" | "SBC" | "RSC"
OPCODE_ARITHMETIC: BASE_OPCODE_ARITHMETIC_LO [CONDITION_LO] [S_LO]
             | BASE_OPCODE_ARITHMETIC_HI [CONDITION_HI] [S_HI]

reg: REG
reg_range: reg "-" reg
reg_list: (reg | reg_range) ("," (reg | reg_range))*

mov_operands: reg "," shifted_reg
            | reg "," immediate

shifted_reg: reg ["," SHIFT]

arithmetic_operands: reg "," shifted_reg
                   | reg "," reg "," shifted_reg

mem_single_operand: reg "," "[" reg ["," immediate] "]" -> mem_expr_immediate
                  | reg "," "[" reg "," immediate "]" "!" -> mem_expr_immediate_pre
                  | reg "," "[" reg "]" "," immediate -> mem_expr_immediate_post
                  | reg "," "[" reg "," shifted_reg "]" -> mem_expr_reg
                  | reg "," "[" reg "," shifted_reg "]" "!" -> mem_expr_reg_pre
                  | reg "," "[" reg "]" "," shifted_reg -> mem_expr_reg_post

mem_multi_operand: reg "," "{" reg_list "}"

instruction: OPCODE_MEM_SINGLE _POST_OPCODE mem_single_operand
           | OPCODE_MEM_MULTI _POST_OPCODE mem_multi_operand
           | OPCODE_BRANCH_REL _POST_OPCODE address
           | OPCODE_BRANCH_IND _POST_OPCODE reg
           | OPCODE_MOV _POST_OPCODE mov_operands
           | OPCODE_ARITHMETIC _POST_OPCODE arithmetic_operands

DEC_NUM: "0" | "1".."9" DIGIT*
HEX_NUM: "0x" HEXDIGIT+
NUM: DEC_NUM | HEX_NUM

address: NUM

line: [address ":"] instruction

%import common.INT
%import common.HEXDIGIT
%import common.DIGIT
%import common.WS_INLINE -> _WS

%declare _POST_OPCODE
